{"version":3,"sources":["components/Pages.js","components/AddTask.js","components/Tasks.js","components/Card.js","components/TaskBoard.js","components/TodoMobile.js","components/DoneMobile.js","components/InpMobile.js","components/ReviewMobile.js","components/MobileView.js","components/App.js","reportWebVitals.js","index.js"],"names":["Pages","pageName","this","props","currentView","event","preventDefault","onViewChange","className","isActivePage","onClick","e","onNavClick","React","Component","AddTask","state","taskTitle","taskType","handleInputChanges","setState","target","name","value","onFormSubmit","onSubmit","htmlFor","type","onChange","id","Tasks","draggable","task","title","column","cardOver","Card","TaskBoard","over","taskID","tasks","findIndex","tempList","onUpdateTaskList","todoTask","todos","map","revTask","revs","inpTask","inps","doneTask","dones","TodoMobile","moveTask","move","t","dos","DoneMobile","InpMobile","taskColumn","ReviewMobile","MobileView","mobile","handleChange","change","onInput","SMALL_DESKTOP","TABLET","App","errorMessage","view","browserSize","breakpoint","singlePage","todo","inp","review","done","onAddTask","taskName","newTask","push","length","onMobileView","newTaskList","sortList","sizeWindow","browserWidth","window","innerWidth","getData","addEventListener","axios","get","then","response","data","catch","error","message","jsx","bind","list","filter","wrapPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAgCeA,E,kKA3BX,SAAaC,GACT,OAAQA,IAAaC,KAAKC,MAAMC,YAAc,kBAAoB,a,wBAGtE,SAAWC,EAAOJ,GACdI,EAAMC,iBACNJ,KAAKC,MAAMI,aAAaN,K,oBAG5B,WAAW,IAAD,OACN,OACA,sBAAKO,UAAU,YAAf,UACI,qBAAKA,UAAU,WAAf,SACI,mBAAGA,UAAWN,KAAKO,aAAa,QAASC,QAAS,SAACC,GAAD,OAAO,EAAKC,WAAWD,EAAG,SAA5E,yBAIJ,qBAAKH,UAAU,WAAf,SACI,mBAAGA,UAAWN,KAAKO,aAAa,OAAQC,QAAS,SAACC,GAAD,OAAO,EAAKC,WAAWD,EAAG,QAA3E,+B,GApBIE,IAAMC,W,QCmDXC,E,4MAnDXC,MAAQ,CACJC,UAAW,GACXC,SAAU,Q,EAGdC,mBAAqB,SAACd,GAElB,EAAKe,SAAL,eACKf,EAAMgB,OAAOC,KAAOjB,EAAMgB,OAAOE,S,EAG1CC,aAAe,SAACnB,GACZA,EAAMC,iBAEN,EAAKH,MAAMsB,SAAS,EAAKT,MAAMC,UAAW,EAAKD,MAAME,UACrD,EAAKE,SAAS,CAAEH,UAAW,GAAIC,SAAU,M,4CAG7C,WACI,OACI,sBAAKV,UAAU,WAAf,UACI,gDAGA,uBAAMA,UAAU,wBAAwBiB,SAAUvB,KAAKsB,aAAvD,UACI,sBAAKhB,UAAU,iBAAf,UACI,uBAAOkB,QAAQ,YAAf,mBACA,uBAAOC,KAAK,OAAOnB,UAAU,eACtBc,KAAK,YACLC,MAAOrB,KAAKc,MAAMC,UAClBW,SAAU1B,KAAKiB,wBAE1B,sBAAKX,UAAU,gBAAf,UACI,uBAAOkB,QAAQ,WAAf,oBACA,yBAAQlB,UAAU,eAAec,KAAK,WAAWO,GAAG,gBAAgBD,SAAU1B,KAAKiB,mBAAnF,UACI,wBAAQI,MAAM,OAAd,oBACA,wBAAQA,MAAM,UAAd,uBACA,wBAAQA,MAAM,MAAd,yBAGR,qBAAKf,UAAU,aAAf,SACI,wBAAQmB,KAAK,SAASnB,UAAU,UAAhC,kC,GA1CFK,IAAMC,WCyBbgB,EAxBD,SAAA3B,GACV,OACQ,sBAAK0B,GAAG,SAASrB,UAAU,OAAOuB,UAAU,QAA5C,UACI,qBAAKvB,UAAU,OAAf,SAAwBL,EAAM6B,KAAKC,QACnC,sBAAKzB,UAAU,KAAf,uBAAgCL,EAAM6B,KAAKH,MAC3C,sBAAKrB,UAAU,OAAf,oBAA+BL,EAAM6B,KAAKL,QAC1C,sBAAKnB,UAAU,eAAf,cAAuD,SAAtBL,EAAM6B,KAAKE,OACxC,wBAAQP,KAAK,SACLjB,QAAS,kBAAMP,EAAMgC,SAAShC,EAAM6B,KAAM,SAC1CxB,UAAU,WAFlB,sBAKA,KACoB,SAAtBL,EAAM6B,KAAKE,OACT,wBAAQP,KAAK,SACLjB,QAAS,kBAAMP,EAAMgC,SAAShC,EAAM6B,KAAM,UAC1CxB,UAAU,WAFlB,kBAKA,KAbJ,WCyBD4B,ICkEAC,E,4MA5FXF,SAAW,SAACH,EAAMM,GACd,IAAMC,EAAS,EAAKpC,MAAMqC,MAAMC,WAAU,SAAA9B,GAAC,OAAIA,EAAEkB,KAAOG,EAAKH,MACzDa,EAAW,EAAKvC,MAAMqC,MACtBN,EAASQ,EAASH,GAAT,OAGE,SAAXL,GAA8B,UAATI,EACrBI,EAASH,GAAT,OAA6B,cAEb,gBAAXL,GAAqC,UAATI,EACjCI,EAASH,GAAT,OAA6B,SAEb,WAAXL,GAAgC,UAATI,IAC5BI,EAASH,GAAT,OAA6B,QAIlB,gBAAXL,GAAqC,SAATI,EACxBI,EAASH,GAAT,OAA6B,OAEjB,WAAXL,GAAgC,SAATI,EACxBI,EAASH,GAAT,OAA6B,cAEjB,SAAXL,GAA8B,SAATI,IAC1BI,EAASH,GAAT,OAA6B,UAGjC,EAAKpC,MAAMwC,iBAAiBD,I,4CAGhC,WAAU,IAAD,OACCE,EAAW1C,KAAKC,MAAM0C,MAAMC,KAAI,SAAAd,GAClC,OAAO,cAAC,EAAD,CACHA,KAAMA,EAENE,OAAQF,EAAKE,OACbC,SAAU,EAAKA,UAFVH,EAAKH,OAMZkB,EAAU7C,KAAKC,MAAM6C,KAAKF,KAAI,SAAAd,GAC5B,OAAO,cAAC,EAAD,CACHA,KAAMA,EAENE,OAAQF,EAAKE,OACbC,SAAU,EAAKA,UAFVH,EAAKH,OAMhBoB,EAAU/C,KAAKC,MAAM+C,KAAKJ,KAAI,SAAAd,GAC5B,OAAO,cAAC,EAAD,CACHA,KAAMA,EAENE,OAAQF,EAAKE,OACbC,SAAU,EAAKA,UAFVH,EAAKH,OAMhBsB,EAAWjD,KAAKC,MAAMiD,MAAMN,KAAI,SAAAd,GAC9B,OAAO,cAAC,EAAD,CACHA,KAAMA,EAENE,OAAQF,EAAKE,OACbC,SAAU,EAAKA,UAFVH,EAAKH,OAMtB,OACI,qBAAKrB,UAAU,YAAf,SACI,uBAAMA,UAAU,oBAAhB,UACI,sBAAKqB,GAAG,UAAUrB,UAAU,QAA5B,UACI,yCACEoC,KAEN,sBAAKf,GAAG,UAAUrB,UAAU,QAA5B,UACI,+CACEyC,KAEN,sBAAKpB,GAAG,UAAUrB,UAAU,QAA5B,UACI,0CACEuC,KAEN,sBAAKlB,GAAG,UAAUrB,UAAU,QAA5B,UACI,wCACE2C,c,GAvFFtC,IAAMC,WCqCfuC,E,4MApCXC,SAAW,SAACtB,EAAMuB,GACd,IAAMhB,EAAS,EAAKpC,MAAMqC,MAAMC,WAAU,SAAAe,GAAC,OAAIA,EAAE3B,KAAOG,EAAKH,MACzDa,EAAW,EAAKvC,MAAMqC,MAGP,SAFFE,EAASH,GAAT,QAEqB,UAATgB,IACzBb,EAASH,GAAT,OAA6B,eAGjC,EAAKpC,MAAMwC,iBAAiBD,I,4CAGhC,WAAU,IAAD,OAECE,EAAW1C,KAAKC,MAAM0C,MAAMC,KAAI,SAAAW,GAClC,OAAO,cAAC,EAAD,CACHzB,KAAMyB,EAENvB,OAAQuB,EAAIvB,OACZoB,SAAU,EAAKA,UAFVG,EAAI5B,OAMjB,OACI,qBAAKrB,UAAU,yBAAf,SACI,sBAAMA,UAAU,UAAhB,SACI,sBAAKqB,GAAG,UAAUrB,UAAU,QAA5B,UACI,yCACEoC,a,GA9BD/B,IAAMC,WCsChB4C,E,4MApCXJ,SAAW,SAACtB,EAAMuB,GACd,IAAMhB,EAAS,EAAKpC,MAAMqC,MAAMC,WAAU,SAAAe,GAAC,OAAIA,EAAE3B,KAAOG,EAAKH,MACzDa,EAAW,EAAKvC,MAAMqC,MAGP,SAFFE,EAASH,GAAT,QAEqB,SAATgB,IACzBb,EAASH,GAAT,OAA6B,UAGjC,EAAKpC,MAAMwC,iBAAiBD,I,4CAGhC,WAAU,IAAD,OAECS,EAAWjD,KAAKC,MAAMiD,MAAMN,KAAI,SAAAM,GAClC,OAAO,cAAC,EAAD,CACHpB,KAAMoB,EAENlB,OAAQkB,EAAMlB,OACdoB,SAAU,EAAKA,UAFVF,EAAMvB,OAMnB,OACI,qBAAKrB,UAAU,wBAAf,SACI,sBAAMA,UAAU,UAAhB,SACI,sBAAKqB,GAAG,UAAUrB,UAAU,QAA5B,UACI,wCACE2C,a,GA9BDtC,IAAMC,WCyChB6C,E,4MAvCXL,SAAW,SAACtB,EAAMuB,GACd,IAAMhB,EAAS,EAAKpC,MAAMqC,MAAMC,WAAU,SAAAe,GAAC,OAAIA,EAAE3B,KAAOG,EAAKH,MACzDa,EAAW,EAAKvC,MAAMqC,MACtBoB,EAAalB,EAASH,GAAT,OAEE,gBAAfqB,GAAyC,UAATL,EAChCb,EAASH,GAAT,OAA6B,SAET,gBAAfqB,GAAyC,SAATL,IACrCb,EAASH,GAAT,OAA6B,QAGjC,EAAKpC,MAAMwC,iBAAiBD,I,4CAGhC,WAAU,IAAD,OAECO,EAAU/C,KAAKC,MAAM+C,KAAKJ,KAAI,SAAAI,GAChC,OAAO,cAAC,EAAD,CACHlB,KAAMkB,EAENhB,OAAQgB,EAAKhB,OACboB,SAAU,EAAKA,UAFVJ,EAAKrB,OAMlB,OACI,qBAAKrB,UAAU,uBAAf,SACI,sBAAMA,UAAU,UAAhB,SACI,sBAAKqB,GAAG,UAAUrB,UAAU,QAA5B,UACI,+CACEyC,a,GAjCFpC,IAAMC,WCyCf+C,E,4MAvCXP,SAAW,SAACtB,EAAMuB,GACd,IAAMhB,EAAS,EAAKpC,MAAMqC,MAAMC,WAAU,SAAAe,GAAC,OAAIA,EAAE3B,KAAOG,EAAKH,MACzDa,EAAW,EAAKvC,MAAMqC,MACtBoB,EAAalB,EAASH,GAAT,OAEE,WAAfqB,GAAoC,UAATL,EAC3Bb,EAASH,GAAT,OAA6B,OAET,WAAfqB,GAAoC,SAATL,IAChCb,EAASH,GAAT,OAA6B,eAGjC,EAAKpC,MAAMwC,iBAAiBD,I,4CAGhC,WAAU,IAAD,OAECK,EAAU7C,KAAKC,MAAM6C,KAAKF,KAAI,SAAAE,GAChC,OAAO,cAAC,EAAD,CACHhB,KAAMgB,EAENd,OAAQc,EAAKd,OACboB,SAAU,EAAKA,UAFVN,EAAKnB,OAMlB,OACI,qBAAKrB,UAAU,0BAAf,SACI,sBAAMA,UAAU,UAAhB,SACI,sBAAKqB,GAAG,UAAUrB,UAAU,QAA5B,UACI,0CACEuC,a,GAjCClC,IAAMC,WC8BlBgD,E,4MA/BX9C,MAAQ,CACJ+C,OAAQ,I,EAGZC,aAAe,SAAC3D,GACZ,EAAKe,SAAS,CAAC2C,OAAQ1D,EAAMgB,OAAOE,S,wDAGxC,SAAmBZ,EAAGsD,GAClB/D,KAAKC,MAAMyB,SAASqC,GACpB/D,KAAKkB,SAAS,CAAC2C,OAAQpD,EAAEU,OAAOE,QAChCZ,EAAEL,iBACFJ,KAAKC,MAAMyB,SAASqC,K,oBAGxB,WAAU,IAAD,OACL,OACI,qBAAKzD,UAAU,WAAf,SACI,sBAAMA,UAAU,oCAAoC0D,QAAShE,KAAK8D,aAAlE,SACQ,yBAAQxD,UAAU,WAAWc,KAAK,SAASO,GAAG,gBAAgBN,MAAOrB,KAAKc,MAAMO,MAAOK,SAAU,SAACjB,GAAD,OAAO,EAAKQ,mBAAmBR,EAAG,EAAKK,MAAM+C,SAA9I,UACI,wBAAQxC,MAAM,OAAd,qBACA,wBAAQA,MAAM,aAAd,2BACA,wBAAQA,MAAM,SAAd,sBACA,wBAAQA,MAAM,OAAd,+B,GAxBHV,IAAMC,WCczBqD,EAAgB,KAChBC,EAAS,IA2KAC,E,4MAvKbrD,MAAQ,CACNwB,MAAO,GACP8B,aAAc,GACdC,KAAM,OACNC,YAAa,EACbC,WAAY,WACZC,WAAY,OAEZC,KAAM,GACNC,IAAK,GACLC,OAAQ,GACRC,KAAM,I,EAgCRC,UAAY,SAACC,EAAU9D,GACrB,IAAI+D,EAAU,EAAKjE,MAAMwB,MACzByC,EAAQC,KAAK,CACXjD,MAAO+C,EACPnD,GAAI,EAAKb,MAAMwB,MAAM2C,OAAS,EAC9BxD,KAAMT,EACNgB,OAAQ,SAGV,EAAKd,SAAS,CAAEoB,MAAOyC,IACvB,EAAK1E,aAAa,QAElB,EAAKoC,iBAAiB,EAAK3B,MAAMwB,Q,EAGnC4C,aAAe,SAACV,GACd,EAAKtD,SAAS,CAACsD,gB,EAYjB/B,iBAAmB,SAAC0C,GAClB,EAAKjE,SAAS,CAACoB,MAAO6C,IACtB,EAAKC,SAASD,I,EAGhBE,WAAa,WACX,IAAMC,EAAeC,OAAOC,WACxBjB,EAAa,WAEbe,EAtFc,MAsFkBA,GAAgBrB,EAClDM,EAAa,gBACJe,EAAerB,GAAiBqB,GAAgBpB,EACzDK,EAAa,SACJe,EAAepB,IACxBK,EAAa,UAGf,EAAKrD,SAAS,CAAEqD,aAAYe,kB,uDA1E9B,WACEtF,KAAKyF,UACLF,OAAOG,iBAAiB,SAAU1F,KAAKqF,YACvCrF,KAAKqF,e,qBAGP,WAAW,IAAD,OACRM,IAAMC,IAAI,kEAAkEC,MAAK,SAAAC,GAC/E,EAAK5E,SAAS,CAACoB,MAAOwD,EAASC,OAC/B,EAAKX,SAAS,EAAKtE,MAAMwB,UACxB0D,OAAM,SAAAC,GACP,EAAK/E,SAAS,CAAEkD,aAAc6B,EAAMC,e,0BAIxC,SAAa7B,GACXrE,KAAKkB,SAAS,CAACmD,W,sBAGjB,SAAS8B,GAAM,IACL9B,EAASrE,KAAKc,MAAduD,KACR,OACI,sBAAK/D,UAAU,YAAf,UACE,cAAC,EAAD,CAAOJ,YAAamE,EAAMhE,aAAcL,KAAKK,aAAa+F,KAAKpG,QAC9DmG,O,sBAwBT,SAASE,GACLrG,KAAKkB,SAAS,CACduD,KAAM4B,EAAKC,QAAO,SAAAxE,GAAI,MAAoB,SAAhBA,EAAKE,UAC/B0C,IAAK2B,EAAKC,QAAO,SAAAxE,GAAI,MAAoB,gBAAhBA,EAAKE,UAC9B2C,OAAQ0B,EAAKC,QAAO,SAAAxE,GAAI,MAAoB,WAAhBA,EAAKE,UACjC4C,KAAMyB,EAAKC,QAAO,SAAAxE,GAAI,MAAoB,SAAhBA,EAAKE,c,oBAwBnC,WAAU,IACAqC,EAASrE,KAAKc,MAAduD,KACAE,EAAevE,KAAKc,MAApByD,WACAC,EAAexE,KAAKc,MAApB0D,WAER,OAAQH,GACN,IAAK,MACH,OAAQrE,KAAKuG,SAAU,cAAC,EAAD,CAAShF,SAAUvB,KAAK6E,aACjD,IAAK,OACH,OAAQN,GACN,IAAK,WASL,IAAK,gBACH,OAAQvE,KAAKuG,SAAU,cAAC,EAAD,CACnB5D,MAAO3C,KAAKc,MAAM2D,KAClB3B,KAAM9C,KAAKc,MAAM6D,OACjB3B,KAAMhD,KAAKc,MAAM4D,IACjBxB,MAAOlD,KAAKc,MAAM8D,KAClBtC,MAAOtC,KAAKc,MAAMwB,MAClBG,iBAAkBzC,KAAKyC,oBAE7B,IAAK,SACL,IAAK,SACH,OAAQ+B,GACN,IAAK,OACH,OACIxE,KAAKuG,SAAS,gCAAK,cAAC,EAAD,CAAY7E,SAAU1B,KAAKkF,aAAakB,KAAKpG,QACpE,cAAC,EAAD,CAAY2C,MAAO3C,KAAKc,MAAM2D,KAClBnC,MAAOtC,KAAKc,MAAMwB,MAClBG,iBAAkBzC,KAAKyC,uBAErC,IAAK,aACH,OACIzC,KAAKuG,SAAS,gCAAK,cAAC,EAAD,CAAY7E,SAAU1B,KAAKkF,aAAakB,KAAKpG,QAC9D,8BAAK,cAAC,EAAD,CAAWgD,KAAMhD,KAAKc,MAAM4D,IACjBpC,MAAOtC,KAAKc,MAAMwB,MAClBG,iBAAkBzC,KAAKyC,yBAE/C,IAAK,SACH,OACIzC,KAAKuG,SAAS,gCAAK,cAAC,EAAD,CAAY7E,SAAU1B,KAAKkF,aAAakB,KAAKpG,QAC9D,8BAAK,cAAC,EAAD,CAAc8C,KAAM9C,KAAKc,MAAM6D,OACjBrC,MAAOtC,KAAKc,MAAMwB,MAClBG,iBAAkBzC,KAAKyC,yBAElD,IAAK,OACH,OACIzC,KAAKuG,SAAS,gCAAK,cAAC,EAAD,CAAY7E,SAAU1B,KAAKkF,aAAakB,KAAKpG,QAC9D,8BAAK,cAAC,EAAD,CAAYkD,MAAOlD,KAAKc,MAAM8D,KAClBtC,MAAOtC,KAAKc,MAAMwB,MAClBG,iBAAkBzC,KAAKyC,yBAEhD,QACE,OACIzC,KAAKuG,SAAS,gCAAK,cAAC,EAAD,CAAY7E,SAAU1B,KAAKkF,aAAakB,KAAKpG,QAC9D,cAAC,EAAD,CAAY2C,MAAO3C,KAAKc,MAAM2D,KAClBnC,MAAOtC,KAAKc,MAAMwB,MAClBG,iBAAkBzC,KAAKyC,uBAG/C,QACE,OAAQzC,KAAKuG,SAAS,4CAE5B,QACE,OAAQvG,KAAKuG,SAAS,iD,GAnKZ5F,IAAMC,WCRT4F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.41d968d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\nclass Pages extends React.Component {\r\n\r\n    isActivePage(pageName) {\r\n        return (pageName === this.props.currentView ? 'nav-link active' : 'nav-link')\r\n    }\r\n\r\n    onNavClick(event, pageName) {\r\n        event.preventDefault();\r\n        this.props.onViewChange(pageName);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n        <div className='nav pages'>\r\n            <div className='nav-item'>\r\n                <a className={this.isActivePage('grid')} onClick={(e) => this.onNavClick(e, 'grid')}>\r\n                    Grid View\r\n                </a>\r\n            </div>\r\n            <div className='nav-item'>\r\n                <a className={this.isActivePage('add')} onClick={(e) => this.onNavClick(e, 'add')}>\r\n                    Add Task\r\n                </a>\r\n            </div>\r\n        </div>\r\n    )\r\n    }\r\n};\r\n\r\nexport default Pages;","import React from 'react';\r\n\r\nclass AddTask extends React.Component {\r\n    state = {\r\n        taskTitle: '',\r\n        taskType: 'task',\r\n    }\r\n\r\n    handleInputChanges = (event) => {\r\n\r\n        this.setState({\r\n            [event.target.name]: event.target.value    });\r\n    }\r\n\r\n    onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.props.onSubmit(this.state.taskTitle, this.state.taskType);\r\n        this.setState({ taskTitle: '', taskType: '' });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"body-con\">\r\n                <h1>\r\n                    Add a New Task\r\n                </h1>\r\n                <form className=\"task-input form-group\" onSubmit={this.onFormSubmit}>\r\n                    <div className=\"task-title-con\">\r\n                        <label htmlFor=\"taskTitle\">Title</label>\r\n                        <input type=\"text\" className=\"form-control\"\r\n                               name=\"taskTitle\"\r\n                               value={this.state.taskTitle}\r\n                               onChange={this.handleInputChanges} />\r\n                    </div>\r\n                    <div className=\"task-type-con\">\r\n                        <label htmlFor=\"taskType\"> Type </label>\r\n                        <select className=\"form-control\" name=\"taskType\" id=\"typeFiltering\" onChange={this.handleInputChanges} >\r\n                            <option value=\"task\"> Task </option>\r\n                            <option value=\"feature\"> Feature </option>\r\n                            <option value=\"bug\"> Bug </option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"button-con\">\r\n                        <button type=\"submit\" className=\"btn-add\">\r\n                            Add Task\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\nimport \"../App.css\"\r\n\r\nconst Tasks = props => {\r\n    return (\r\n            <div id=\"card-1\" className=\"card\" draggable=\"false\">\r\n                <div className=\"name\">{ props.task.title }</div>\r\n                <div className=\"id\"> Task ID: { props.task.id }</div>\r\n                <div className=\"type\"> Type: { props.task.type }</div>\r\n                <div className=\"control-move\"> { props.task.column !== \"todo\" ? (\r\n                    <button type=\"button\"\r\n                            onClick={() => props.cardOver(props.task, 'left')}\r\n                            className=\"btn-move\">\r\n                        Previous\r\n                    </button>\r\n                ) : null }\r\n                { props.task.column !== \"done\" ? (\r\n                    <button type=\"button\"\r\n                            onClick={() => props.cardOver(props.task, 'right')}\r\n                            className=\"btn-move\">\r\n                        Next\r\n                    </button>\r\n                ) : null } </div>\r\n            </div>\r\n    )\r\n};\r\n\r\nexport default Tasks;","import React from \"react\";\r\n\r\n//required or code will die\r\nfunction Card (props) {\r\n\r\n    const dragStart = e => {\r\n        const target = e.target;\r\n\r\n\r\n        console.log(target);\r\n        e.dataTransfer.setData('card_id', target.id);\r\n        setTimeout(() => {\r\n            target.style.display = \"none\";\r\n        }, 0);\r\n    }\r\n\r\n    const dragOver = e => {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    return (\r\n        <div\r\n            id={props.id}\r\n            className={props.className}\r\n            draggable={props.draggable}\r\n            onDragStart={dragStart}\r\n            onDragOver={dragOver}\r\n\r\n        >\r\n            { props.children }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport Tasks from './Tasks';\r\nimport Card from \"./Card\";\r\nimport \"../App.css\";\r\n\r\nclass TaskBoard extends React.Component {\r\n\r\n\r\n    cardOver = (task, over) => {\r\n        const taskID = this.props.tasks.findIndex(e => e.id === task.id);\r\n        let tempList = this.props.tasks;\r\n        let column = tempList[taskID][\"column\"];\r\n\r\n        // functionality for the right moving buttons\r\n        if (column === 'todo' && over === 'right') {\r\n            tempList[taskID][\"column\"] = 'in-progress';\r\n        }\r\n        else if (column === 'in-progress' && over === 'right') {\r\n            tempList[taskID][\"column\"] = 'review';\r\n        }\r\n        else if (column === 'review' && over === 'right') {\r\n            tempList[taskID][\"column\"] = 'done';\r\n        }\r\n\r\n        // functionality for the left moving buttons\r\n        if (column === 'in-progress' && over === 'left'){\r\n                tempList[taskID][\"column\"] = 'todo';\r\n        }\r\n        else if (column === 'review' && over === 'left'){\r\n                tempList[taskID][\"column\"] = 'in-progress';\r\n        }\r\n        else if (column === 'done' && over === 'left') {\r\n            tempList[taskID][\"column\"] = 'review';\r\n        }\r\n\r\n        this.props.onUpdateTaskList(tempList);\r\n    }\r\n\r\n    render() {\r\n        const todoTask = this.props.todos.map(task => {\r\n            return <Tasks\r\n                task={task}\r\n                key={task.id}\r\n                column={task.column}\r\n                cardOver={this.cardOver}\r\n            />\r\n        });\r\n\r\n        const revTask = this.props.revs.map(task => {\r\n                return <Tasks\r\n                    task={task}\r\n                    key={task.id}\r\n                    column={task.column}\r\n                    cardOver={this.cardOver}\r\n                />\r\n        });\r\n\r\n        const inpTask = this.props.inps.map(task => {\r\n                return <Tasks\r\n                    task={task}\r\n                    key={task.id}\r\n                    column={task.column}\r\n                    cardOver={this.cardOver}\r\n                />\r\n        });\r\n\r\n        const doneTask = this.props.dones.map(task => {\r\n                return <Tasks\r\n                    task={task}\r\n                    key={task.id}\r\n                    column={task.column}\r\n                    cardOver={this.cardOver}\r\n                />\r\n        });\r\n\r\n        return (\r\n            <div className=\"TaskBoard\">\r\n                <main className=\"flexbox main-flex\">\r\n                    <div id=\"board-1\" className=\"board\">\r\n                        <h2> To Do </h2>\r\n                        { todoTask }\r\n                    </div>\r\n                    <div id=\"board-2\" className=\"board\">\r\n                        <h2> In Progress </h2>\r\n                        { inpTask }\r\n                    </div>\r\n                    <div id=\"board-3\" className=\"board\">\r\n                        <h2> Review </h2>\r\n                        { revTask }\r\n                    </div>\r\n                    <div id=\"board-4\" className=\"board\">\r\n                        <h2> Done </h2>\r\n                        { doneTask }\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskBoard;","import React from 'react';\r\nimport Tasks from './Tasks';\r\nimport \"../App.css\";\r\n\r\nclass TodoMobile extends React.Component {\r\n\r\n    moveTask = (task, move) => {\r\n        const taskID = this.props.tasks.findIndex(t => t.id === task.id);\r\n        let tempList = this.props.tasks;\r\n        let taskColumn = tempList[taskID][\"column\"];\r\n\r\n        if (taskColumn === \"todo\" && move === 'right'){\r\n            tempList[taskID][\"column\"] = \"in-progress\";\r\n        }\r\n\r\n        this.props.onUpdateTaskList(tempList);\r\n    }\r\n\r\n    render() {\r\n\r\n        const todoTask = this.props.todos.map(dos => {\r\n            return <Tasks\r\n                task={dos}\r\n                key={dos.id}\r\n                column={dos.column}\r\n                moveTask={this.moveTask}\r\n            />\r\n        });\r\n\r\n        return (\r\n            <div className=\"TodoMobile  over-board\">\r\n                <main className=\"flexbox\">\r\n                    <div id=\"board-1\" className=\"board\">\r\n                        <h2> To Do </h2>\r\n                        { todoTask }\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoMobile;","import React from 'react';\r\nimport Tasks from './Tasks';\r\nimport \"../App.css\";\r\n\r\nclass DoneMobile extends React.Component {\r\n\r\n    moveTask = (task, move) => {\r\n        const taskID = this.props.tasks.findIndex(t => t.id === task.id);\r\n        let tempList = this.props.tasks;\r\n        let taskColumn = tempList[taskID][\"column\"];\r\n\r\n        if (taskColumn === \"done\" && move === 'left'){\r\n            tempList[taskID][\"column\"] = \"review\";\r\n        }\r\n\r\n        this.props.onUpdateTaskList(tempList);\r\n    }\r\n\r\n    render() {\r\n\r\n        const doneTask = this.props.dones.map(dones => {\r\n            return <Tasks\r\n                task={dones}\r\n                key={dones.id}\r\n                column={dones.column}\r\n                moveTask={this.moveTask}\r\n            />\r\n        });\r\n\r\n        return (\r\n            <div className=\"DoneMobile over-board\">\r\n                <main className=\"flexbox\">\r\n                    <div id=\"board-1\" className=\"board\">\r\n                        <h2> Done </h2>\r\n                        { doneTask }\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DoneMobile;","import React from 'react';\r\nimport Tasks from './Tasks';\r\nimport \"../App.css\";\r\n\r\nclass InpMobile extends React.Component {\r\n\r\n    moveTask = (task, move) => {\r\n        const taskID = this.props.tasks.findIndex(t => t.id === task.id);\r\n        let tempList = this.props.tasks;\r\n        let taskColumn = tempList[taskID][\"column\"];\r\n\r\n        if (taskColumn === \"in-progress\" && move === 'right'){\r\n            tempList[taskID][\"column\"] = \"review\";\r\n        }\r\n        else if (taskColumn === \"in-progress\" && move === 'left'){\r\n            tempList[taskID][\"column\"] = \"todo\";\r\n        }\r\n\r\n        this.props.onUpdateTaskList(tempList);\r\n    }\r\n\r\n    render() {\r\n\r\n        const inpTask = this.props.inps.map(inps => {\r\n            return <Tasks\r\n                task={inps}\r\n                key={inps.id}\r\n                column={inps.column}\r\n                moveTask={this.moveTask}\r\n            />\r\n        });\r\n\r\n        return (\r\n            <div className=\"InpMobile over-board\">\r\n                <main className=\"flexbox\">\r\n                    <div id=\"board-1\" className=\"board\">\r\n                        <h2> In Progress </h2>\r\n                        { inpTask }\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InpMobile;","import React from 'react';\r\nimport Tasks from './Tasks';\r\nimport \"../App.css\";\r\n\r\nclass ReviewMobile extends React.Component {\r\n\r\n    moveTask = (task, move) => {\r\n        const taskID = this.props.tasks.findIndex(t => t.id === task.id);\r\n        let tempList = this.props.tasks;\r\n        let taskColumn = tempList[taskID][\"column\"];\r\n\r\n        if (taskColumn === \"review\" && move === 'right'){\r\n            tempList[taskID][\"column\"] = \"done\";\r\n        }\r\n        else if (taskColumn === \"review\" && move === 'left'){\r\n            tempList[taskID][\"column\"] = \"in-progress\";\r\n        }\r\n\r\n        this.props.onUpdateTaskList(tempList);\r\n    }\r\n\r\n    render() {\r\n\r\n        const revTask = this.props.revs.map(revs => {\r\n            return <Tasks\r\n                task={revs}\r\n                key={revs.id}\r\n                column={revs.column}\r\n                moveTask={this.moveTask}\r\n            />\r\n        });\r\n\r\n        return (\r\n            <div className=\"ReviewMobile over-board\">\r\n                <main className=\"flexbox\">\r\n                    <div id=\"board-1\" className=\"board\">\r\n                        <h2> Review </h2>\r\n                        { revTask }\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReviewMobile;","import React from 'react';\r\n\r\nclass MobileView extends React.Component {\r\n    state = {\r\n        mobile: '',\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({mobile: event.target.value});\r\n    }\r\n\r\n    handleInputChanges(e, change) {\r\n        this.props.onChange(change);\r\n        this.setState({mobile: e.target.value});\r\n        e.preventDefault();\r\n        this.props.onChange(change);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"drop-con\">\r\n                <form className=\"task-input form-group mobile-form\" onInput={this.handleChange}>\r\n                        <select className=\"form-con\" name=\"mobile\" id=\"typeFiltering\" value={this.state.value} onChange={(e) => this.handleInputChanges(e, this.state.mobile)} >\r\n                            <option value=\"ToDo\"> To Do </option>\r\n                            <option value=\"InProgress\"> In-progress </option>\r\n                            <option value=\"Review\"> Review </option>\r\n                            <option value=\"Done\"> Done </option>\r\n                        </select>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MobileView;","// imports\r\nimport '../App.css';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Pages from \"./Pages\";\r\nimport AddTask from \"./AddTask\";\r\nimport TaskBoard from \"./TaskBoard\";\r\nimport TodoMobile from \"./TodoMobile\";\r\nimport DoneMobile from './DoneMobile';\r\nimport InpMobile from './InpMobile';\r\nimport ReviewMobile from './ReviewMobile';\r\nimport MobileView from './MobileView';\r\n\r\n//Constants\r\nconst LARGE_DESKTOP = 1366;\r\nconst SMALL_DESKTOP = 1024;\r\nconst TABLET = 768;\r\n\r\n// Class\r\nclass App extends React.Component {\r\n  state = {\r\n    tasks: [],\r\n    errorMessage: '',\r\n    view: 'grid',\r\n    browserSize: 0,\r\n    breakpoint: 'standard',\r\n    singlePage: 'ToDo',\r\n\r\n    todo: [],\r\n    inp: [],\r\n    review: [],\r\n    done: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n    window.addEventListener('resize', this.sizeWindow);\r\n    this.sizeWindow();\r\n  }\r\n\r\n  getData() {\r\n    axios.get('https://my-json-server.typicode.com/bnissen24/project2DB/posts').then(response => {\r\n      this.setState({tasks: response.data});\r\n      this.sortList(this.state.tasks);\r\n    }).catch(error => {\r\n      this.setState({ errorMessage: error.message});\r\n    });\r\n  }\r\n\r\n  onViewChange(view) {\r\n    this.setState({view});\r\n  }\r\n\r\n  wrapPage(jsx) {\r\n    const { view } = this.state;\r\n    return (\r\n        <div className=\"container\">\r\n          <Pages currentView={view} onViewChange={this.onViewChange.bind(this)}/>\r\n          {jsx}\r\n        </div>\r\n    )\r\n  }\r\n\r\n  onAddTask = (taskName, taskType) => {\r\n    let newTask = this.state.tasks;\r\n    newTask.push({\r\n      title: taskName,\r\n      id: this.state.tasks.length + 1,\r\n      type: taskType,\r\n      column: 'todo'\r\n    });\r\n\r\n    this.setState({ tasks: newTask });\r\n    this.onViewChange('grid');\r\n\r\n    this.onUpdateTaskList(this.state.tasks);\r\n  }\r\n\r\n  onMobileView = (singlePage) => {\r\n    this.setState({singlePage});\r\n  }\r\n\r\n  sortList(list) {\r\n      this.setState({\r\n      todo: list.filter(task => task.column === 'todo'),\r\n      inp: list.filter(task => task.column === 'in-progress'),\r\n      review: list.filter(task => task.column === 'review'),\r\n      done: list.filter(task => task.column === 'done')\r\n      })\r\n  }\r\n\r\n  onUpdateTaskList = (newTaskList) => {\r\n    this.setState({tasks: newTaskList});\r\n    this.sortList(newTaskList);\r\n  }\r\n\r\n  sizeWindow = () => {\r\n    const browserWidth = window.innerWidth;\r\n    let breakpoint = 'standard';\r\n\r\n    if (browserWidth < LARGE_DESKTOP && browserWidth >= SMALL_DESKTOP) {\r\n      breakpoint = 'small-desktop';\r\n    } else if (browserWidth < SMALL_DESKTOP && browserWidth >= TABLET) {\r\n      breakpoint = 'tablet';\r\n    } else if (browserWidth < TABLET) {\r\n      breakpoint = 'mobile';\r\n    }\r\n\r\n    this.setState({ breakpoint, browserWidth });\r\n  }\r\n\r\n  render() {\r\n    const { view } = this.state;\r\n    const { breakpoint } = this.state;\r\n    const { singlePage } = this.state;\r\n\r\n    switch (view) {\r\n      case 'add':\r\n        return (this.wrapPage((<AddTask onSubmit={this.onAddTask} />)));\r\n      case 'grid':\r\n        switch (breakpoint) {\r\n          case 'standard':\r\n            return (this.wrapPage((<TaskBoard\r\n                todos={this.state.todo}\r\n                revs={this.state.review}\r\n                inps={this.state.inp}\r\n                dones={this.state.done}\r\n                tasks={this.state.tasks}\r\n                onUpdateTaskList={this.onUpdateTaskList}\r\n                />)));\r\n          case 'small-desktop':\r\n            return (this.wrapPage((<TaskBoard\r\n                todos={this.state.todo}\r\n                revs={this.state.review}\r\n                inps={this.state.inp}\r\n                dones={this.state.done}\r\n                tasks={this.state.tasks}\r\n                onUpdateTaskList={this.onUpdateTaskList}\r\n                />)));\r\n          case 'tablet':\r\n          case 'mobile':\r\n            switch (singlePage) {\r\n              case 'ToDo':\r\n                return (\r\n                    this.wrapPage(<div><MobileView onChange={this.onMobileView.bind(this)} />\r\n                <TodoMobile todos={this.state.todo}\r\n                            tasks={this.state.tasks}\r\n                            onUpdateTaskList={this.onUpdateTaskList}/></div>)\r\n                );\r\n              case 'InProgress':\r\n                return (\r\n                    this.wrapPage(<div><MobileView onChange={this.onMobileView.bind(this)} />\r\n                      <div><InpMobile inps={this.state.inp}\r\n                                      tasks={this.state.tasks}\r\n                                      onUpdateTaskList={this.onUpdateTaskList}/></div></div>)\r\n                );\r\n              case 'Review':\r\n                return (\r\n                    this.wrapPage(<div><MobileView onChange={this.onMobileView.bind(this)} />\r\n                      <div><ReviewMobile revs={this.state.review}\r\n                                         tasks={this.state.tasks}\r\n                                         onUpdateTaskList={this.onUpdateTaskList}/></div></div>)\r\n                );\r\n              case 'Done':\r\n                return (\r\n                    this.wrapPage(<div><MobileView onChange={this.onMobileView.bind(this)} />\r\n                      <div><DoneMobile dones={this.state.done}\r\n                                       tasks={this.state.tasks}\r\n                                       onUpdateTaskList={this.onUpdateTaskList}/></div></div>)\r\n                );\r\n              default:\r\n                return (\r\n                    this.wrapPage(<div><MobileView onChange={this.onMobileView.bind(this)} />\r\n                      <TodoMobile todos={this.state.todo}\r\n                                  tasks={this.state.tasks}\r\n                                  onUpdateTaskList={this.onUpdateTaskList}/></div>)\r\n                );\r\n            }\r\n          default:\r\n            return (this.wrapPage(<h2>Try Again</h2>));\r\n        }\r\n      default:\r\n        return (this.wrapPage(<h2>Try Again</h2>));\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}